%%% TODO: minor key support.

test(A) :-
	test2([A,B,C]).

test2([A,B,C]) :-
	test3([A,B,C]).

test3(X) :-
	X = [1,2,3].


%% provide all of the possible chord options that contain the given note
%% based on the provided major key.
maj_voicings(Root, Note, Chord) :-
	voicings(Root, "Major", Note, Chord).

voicings(Root, Key, Note, Chord) :-
	each_diatonic_triad(Root, Key, [Note,_2,_3]),
	Chord = [Note,_2,_3].
voicings(Root, Key, Note, Chord) :-
	each_diatonic_triad(Root, Key, [_1,Note,_3]),
	Chord = [_1,Note,_3].
voicings(Root, Key, Note, Chord) :-
	each_diatonic_triad(Root, Key, [_1,_2,Note]),
	Chord = [_1,_2,Note].

%% Diatonic triads in the major scale given by Root.
each_diatonic_triad(Root, "Major", One) :-
	major_scale(Root,[Root, _2, _3, _4, _5,_6,_7,_8]),
	major_triad(Root, One).
each_diatonic_triad(Root, "Major", Two) :-
	major_scale(Root,[Root, _2, _3, _4, _5,_6,_7,_8]),
	minor_triad(_2, Two).
each_diatonic_triad(Root, "Major", Three) :-
	major_scale(Root,[Root, _2, _3, _4, _5,_6,_7,_8]),
	minor_triad(_3, Three).
each_diatonic_triad(Root, "Major", Four) :-
	major_scale(Root,[Root, _2, _3, _4, _5,_6,_7,_8]),
	major_triad(_4, Four).
each_diatonic_triad(Root, "Major", Five) :-
	major_scale(Root,[Root, _2, _3, _4, _5,_6,_7,_8]),
	major_triad(_5, Five).
each_diatonic_triad(Root, "Major", Six) :-
	major_scale(Root,[Root, _2, _3, _4, _5,_6,_7,_8]),
	minor_triad(_6, Six).
each_diatonic_triad(Root, "Major", Seven) :-
	major_scale(Root,[Root, _2, _3, _4, _5,_6,_7,_8]),
	dim_triad(_7, Seven).


diatonic_traids(Root, "Major", [One,Two,Three,Four,Five,Six,Seven]) :-
	major_scale(Root,[Root, _2, _3, _4, _5,_6,_7,_8]),
	major_triad(Root, One),
	minor_triad(_2, Two),
	minor_triad(_3, Three),
	major_triad(_4, Four),
	major_triad(_5, Five),
	minor_triad(_6, Six),
	dim_triad(_7, Seven).

%%%%
% Basic Chord Definitions (tonal)
%%%%
major_triad(Root, [Root,Third,Fifth]) :-
	major_scale(Root, [Root, _2, Third, _4, Fifth,_6,_7,_8]).

minor_triad(Root, [Root,Third,Fifth]) :-
	major_triad(Root, [Root,_MThird,Fifth]),
	half_step_up(Third, _MThird).

dim_triad(Root, [Root,Third,Fifth]) :-
	minor_triad(Root, [Root,Third,_MFifth]),
	half_step_up(Fifth, _MFifth).

%% A major scale with the given root.
major_scale(Root, [Root, N1, N2, N3, N4, N5, N6, N7]) :-
	whole_step_up(Root, N1),
	whole_step_up(N1, N2),
	half_step_up(N2, N3),
	whole_step_up(N3, N4),
	whole_step_up(N4, N5),
	whole_step_up(N5, N6),
	half_step_up(N6, N7).

%%%%
% Basic tonal relationships
%%%%
whole_step_up(A,B) :- half_step_up(A,C), half_step_up(C,B).
whole_step_up(A,B,OctaveIn,OctaveOut) :-
	half_step_up(A,_B, OctaveIn,_O3),
	half_step_up(_B,B, _O3, OctaveOut).

half_step_up("A","A#").
half_step_up("A#","B").
half_step_up("B","C").
half_step_up("C","C#").
half_step_up("C#","D").
half_step_up("D","D#").
half_step_up("D#","E").
half_step_up("E","F").
half_step_up("F","F#").
half_step_up("F#","G").
half_step_up("G","G#").
half_step_up("G#","A").

half_step_up("A","A#",Octave,Octave).
half_step_up("A#","B",Octave,Octave).
half_step_up("B","C",Octave,Octave).
half_step_up("C","C#",Octave,Octave).
half_step_up("C#","D",Octave,Octave).
half_step_up("D","D#",Octave,Octave).
half_step_up("D#","E",Octave,Octave).
half_step_up("E","F",Octave,Octave).
half_step_up("F","F#",Octave,Octave).
half_step_up("F#","G",Octave,Octave).
half_step_up("G","G#",Octave,Octave).
half_step_up("G#","A",OctaveIn,OctaveOut) :- OctaveOut is OctaveIn + 1.
half_step_up("G#","A",OctaveIn,OctaveOut) :- OctaveIn is OctaveOut - 1.
